<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text;

namespace InteropBitmaps
{
    partial class _PixelConverters
    {
    
    <#
    var pixelTypes = new []{ "Gray8", "Gray16", "Rgb24", "Bgr24", "Rgba32", "Bgra32", "Argb32" };
    foreach(var pixelType in pixelTypes) {
        var pixelSize= 0;

        if (pixelType.EndsWith("8")) pixelSize = 1;
        if (pixelType.EndsWith("16")) pixelSize = 2;
        if (pixelType.EndsWith("24")) pixelSize = 3;
        if (pixelType.EndsWith("32")) pixelSize = 4;
    #>

        private struct _Cvt<#= pixelType#> : IRGBConverter
        {
            const int SIZE = <#= pixelSize#>;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.From<#= pixelType#>(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].To<#= pixelType#>(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    <#}#>

    }
}