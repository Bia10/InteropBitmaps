
// <auto-generated />
using System;
using System.Collections.Generic;
using System.Text;

namespace InteropBitmaps
{
    partial class _PixelConverters
    {
    
    
        private struct _CvtGray8 : IRGBConverter
        {
            const int SIZE = 1;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.FromGray8(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].ToGray8(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    
        private struct _CvtGray16 : IRGBConverter
        {
            const int SIZE = 2;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.FromGray16(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].ToGray16(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    
        private struct _CvtRgb24 : IRGBConverter
        {
            const int SIZE = 3;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.FromRgb24(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].ToRgb24(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    
        private struct _CvtBgr24 : IRGBConverter
        {
            const int SIZE = 3;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.FromBgr24(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].ToBgr24(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    
        private struct _CvtRgba32 : IRGBConverter
        {
            const int SIZE = 4;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.FromRgba32(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].ToRgba32(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    
        private struct _CvtBgra32 : IRGBConverter
        {
            const int SIZE = 4;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.FromBgra32(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].ToBgra32(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    
        private struct _CvtArgb32 : IRGBConverter
        {
            const int SIZE = 4;

            public void ConvertFrom(Span<_PixelBGRA32> dst, ReadOnlySpan<byte> src, int srcY)
            {
                while(dst.Length > 0)
                {
                    dst[0] = _PixelBGRA32.FromArgb32(src);
                    src = src.Slice(SIZE);
                    dst = dst.Slice(1);                    
                }
            }

            public void ConvertTo(Span<byte> dst,int dstY, ReadOnlySpan<_PixelBGRA32> src)
            {
                while(src.Length > 0)
                {
                    src[0].ToArgb32(dst);
                    src = src.Slice(1);
                    dst = dst.Slice(SIZE);                    
                }
            }
        }

    
    }
}